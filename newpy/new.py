import re
import os
import shutil
import datetime
import random

PARTY_DIR = '_party'
SHORTCUT_MAX_LETTER_NUM = 3
SHORTCUT_MAX_COUNTER_NUM = 999
WORDS_PATH = 'new.py.words.txt'


def make_source_dir_name(project_name):
    return f'www_{project_name}'


def lay_scripts(source_dir, scripts):
    out = ''
    for script in scripts:
        out += f'\n  <script src="{source_dir}/{script}"></script>'
    return out


def lay_index_html(project_name, scripts):
    source_dir = make_source_dir_name(project_name)
    return f"""<!-- gen by new.py at {datetime.datetime.now()} -->
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" type="text/css" href="{source_dir}/index.css">
  <title>{project_name}</title>{lay_scripts(source_dir, scripts)}
  <script src="{source_dir}/index.js"></script>
</head>
<body>
</body>
</html>
"""


def lay_index_css():
    return f"""/* gen by new.py at {datetime.datetime.now()} */
body {{
  background-color: #111;
  color: #aaa;
  font-family: monospace;
  font-size: 11px;
  height: 100%;
  width: 100%;
  padding: 0;
  margin: 0;
  justify-content: center;
  align-items: center;
  display: flex;
}}
canvas {{
  image-rendering: pixelated;
}}
"""


def lay_index_js():
    return f"""/* gen by new.py at {datetime.datetime.now()} */
window.onload = async function onload() {{
  if ('seedrandom' in Math) Math.seedrandom('0');
  const height = 400;
  const width = 400;
  const ctx = document.createElement('canvas').getContext('2d');
  ctx.canvas.height = height;
  ctx.canvas.width = width;
  document.body.appendChild(ctx.canvas);
  ctx.imageSmoothingEnabled = false;

  ctx.save();
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, width, height);
  ctx.restore();
}}
"""


def write_file(filename, content):
    try:
        f = open(filename, 'x')
        f.write(content)
        f.close()
        print(f' - created {filename}')
    except FileExistsError:
        print(f' - already exist {filename}')
        return False
    return True


def input_party():
    """ Helps to select external scripts to be included in project. """
    print('Party:', end=' ')
    try:
        (_, _, filenames) = next(os.walk(PARTY_DIR))
        if len(filenames) == 0:
            print('Directory is empty.')
        else:
            longest_name_len = max(len(e) for e in filenames)
            print('[shortcuts are autogenerated]')
            shortcuts = []
            for name in filenames:
                shortcut = ''
                shortcut_created = False
                # create shortcut by name
                for i in range(SHORTCUT_MAX_LETTER_NUM):
                    shortcut += name[i]
                    if not any(shortcut == e for e in shortcuts):
                        shortcut_created = True
                        break
                # create shortcut by index if not created
                if not shortcut_created:
                    for i in range(SHORTCUT_MAX_COUNTER_NUM):
                        s = shortcut + str(i+1)
                        if any(s == e for e in shortcuts):
                            shortcut_created = True
                            shortcut = s
                            break
                # shortcut not created
                if not shortcut_created:
                    print(f'Shortcut for "{name}" cannot be created.')
                    print(f'Add better shortcut generator you prick.')
                    print(f'Nothing will be included in project.')
                    return ( (), () )
                # shortcut created
                shortcuts.append(shortcut)
                print(f'* {name} {{:>{3+longest_name_len-len(name)}}}'.format(shortcut))
            # parse scripts from shurtcuts
            scripts_raw = input('Enter shortcuts (separate with space) to include scripts: ')
            scripts_raw = re.sub(r'[ ,]', ' ', scripts_raw).split()
            scripts = []
            for s in scripts_raw:
                si = -1
                try: si = shortcuts.index(s)        # try to find in shortcuts
                except ValueError:
                    try: si = filenames.index(s)    # overwise try to find in filenames
                    except ValueError: pass         # do nothing if not found
                # shortcut found
                if si >= 0:
                    scripts.append(filenames[si])
            # scripts will be included
            if len(scripts):
                print(f'{scripts} will be included in project.')
                return scripts
                # a = input(f'{scripts} will be included in project. Are you ok with this? (Y/n) ')
                # a = re.sub(r'\W+', '', a)
                # if any(a == e for e in ('n', 'N', 'no')):
            else:
                print(f'Nothing will be included in project.')
    except StopIteration:
        print(f'There is no "{PARTY_DIR}" directory.')
    return ()


def create_directory(dirname):
    try:
        os.mkdir(dirname)
    except (FileNotFoundError, OSError):
        print(f'Cannot create directory "{dirname}".')
        return False
    return True


def create_random_name():
    with open(WORDS_PATH) as f:
        data = f.readlines()
        data = list(filter(lambda e: not e.isspace(), data))
        nouns_i = data.index('#nouns\n')
        adjs = data[0:nouns_i]
        nouns = data[nouns_i+1:-1]
        name = random.choice(adjs)[0:-1] + '-' + random.choice(nouns)[0:-1]
        print(f'  {name} [autogenerated]')
        return name
    return ''


""" Main  """


project_name = input('Enter project name: ')
if len(project_name) == 0: project_name = create_random_name()
source_dir = make_source_dir_name(project_name)

if not create_directory(project_name) or not create_directory(f'{project_name}/{source_dir}'):
    print(f'Project creation was interrupted.')
    exit(1)

party = input_party()

files = (
    ( 'index.html', lay_index_html(project_name, party) ),
    ( f'{source_dir}/index.css', lay_index_css() ),
    ( f'{source_dir}/index.js', lay_index_js() ),
)

for f in files:
    if not write_file(f'{project_name}/{f[0]}', f[1]):
        print(f'Project creation was interrupted.')
        exit(1)

for f in party:
    shutil.copy(f'{PARTY_DIR}/{f}', f'{project_name}/{source_dir}')
    print(f' - copied {f}')

print(f'Project "{project_name}" created.')
